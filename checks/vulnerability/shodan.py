#!/usr/bin/python3
import os
import sys
import json
import socket
import requests

import dns.resolver

key = os.environ.get("SHODAN_KEY")
results = []

def main(type: str, target: str):
    """Main method

    Args:
        type (str): Type of target.
        target (str): Domain to check.
    """
    targets = []

    if type == "domain":
        targets = resolve(target)
    elif type == "ip":
        targets = [target]
    elif type == "ipv6":
        targets = socket.gethostbyaddr(target)

    results = []

    for ip in targets:
        results.extend(checkTarget(ip))

    print(json.dumps(results))

def resolve(domain: str) -> list:
    """Resolve a domain to a set of ip addresses.
    """
    ips = []
    try:
        result = dns.resolver.resolve(domain)
        for ipVal in result:
            ips.append(ipVal.to_text())
        return ips
    except Exception as e:
        print("{}")
        sys.exit(0)


def checkTarget(ip: str) -> list:
    """ Check an ip against shodan.

    Args:
        host_ip (str): The ip address to check.
    """
    try:
        response = requests.get("https://api.shodan.io/shodan/host/" + ip + "?key=" + key)

        try:
            responsedr = json.loads(response.text)
            keyval = "tags"
            responselist = responsedr[keyval]
            dbfound = False

            for i in responselist:
                if i == "database":
                    dbfound = True
                    results.append({
                        "name": "database",
                        "score": 0,
                        "message": "Shodan found a database.",
                        "description": "database"
                    })

            if not dbfound:
                results.append({
                    "name": "database",
                    "score": 10,
                    "message": "Shodan didn't find a database.",
                    "description": "database"
                })
        except:
            results.append({})

        try:
            dates = [entry['timestamp'] for entry in responsedr['data']]

            date = dates[0]

            yy = date[0:4]
            mm = date[5:7]
            dd = date[8:10]
            hh = date[11:13]
            min = date[14:16]
            sec = date[17:19]

            date = yy + "-" + mm + "-" + dd + " " + hh + ":" + min + ":" + sec

            portlist = [entry['port'] for entry in responsedr['data']]
            dbports = [5432, 1433, 1434, 3306, 3050, 5432, 3351, 1583]
            adports = [9389, 389, 636, 88, 445]
            redis = [6379, 26379]

            badports = dbports + adports + redis
            foundbadports = []

            for port in portlist:
                for dport in badports:
                    if port==dport:
                        foundbadports.append(port)

            countp = len(foundbadports)
            score = 10 - countp * 2

            if score < 0:
                score = 0

            results.append({
                "name": "badports",
                "score": score,
                "message": "Shodan has found " + str(countp) +  " bad ports. Datum:" + str(date),
                "description": "badports"
            })

        except:
            results.append({})

        try:
            vulns = responsedr['vulns']
            countcve = len(vulns)
            score = 10 - countcve * 2

            if score < 0:
                score = 0

            results.append({
                "name": "Vulnabilities",
                "score": score,
                "message": "Shodan has found " + str(countcve) +  " CVEs.",
                "description": "shodan"
            })
        except:
            results.append({
                "name": "Vulnabilities",
                "score": 10,
                "message": "Shodan did not found any CVEs.",
                "description": "shodan"
            })

    except:
        results.append({})

    return results

if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2])
